# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  node: circleci/node@1.1.6

jobs:
  # Install deps
  yarn-install:
    executor:
      name: node/default
      tag: lts

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/rykan-auth

    steps:
      # Download and cache dependencies
      - checkout
      - run:
          name: Install Nodejs Dependencies
          command: yarn install
      - save_cache:
          key: repo-yarn-packages
          paths:
            - ~/rykan-auth
  # Ts-lint
  ts-lint:
    executor:
      name: node/default
      tag: lts

    working_directory: ~/rykan-auth

    steps:
      - checkout
      - restore_cache:
          keys:
            - repo-yarn-packages
      - run:
          name: TSLint
          command: ls && yarn run tslint --project ./login --config ./tslint.json
  
  # Login tests
  login-test:
    environment:
      RYKAN_DB_ENV: ci
      DEBIAN_FRONTEND: noninteractive
      RYKAN_AMQP_ADDRESS: 'amqp://ci:ci@rabbitmq:5672'
    docker:
      - image: circleci/node:lts
      - image: circleci/postgres:10
        environment:
          POSTGRES_DB: users
          POSTGRES_USER: rykan-testing
          POSTGRES_PASSWORD: ""
      - image: rabbitmq:3
        environment:
          RABBITMQ_DEFAULT_USER: ci
          RABBITMQ_DEFAULT_PASS: ci

    working_directory: ~/rykan-auth

    steps:
      - checkout
      - restore_cache:
          keys:
            - repo-yarn-packages
      - run:
          name: Provision PostgreSQL
          command: |
            cd login
            psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f sql/database.create.sql # Create DB
            psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ci/database.create.ci.sql # Change PWD
            psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f sql/database.insert.dev.sql # Add test user
      - run:
          name: Generate Keys
          command: |
            cd login
            openssl genrsa -out ./private/jwt-rs256-private.pem 2048
            openssl rsa -in ./private/jwt-rs256-private.pem -pubout > ./private/jwt-rs256-public.pem
      - run:
          name: Test & codecov
          command: |
            cd login
            yarn run coverage
            yarn run codecov
workflows:
  version: 2
  nodejs:
    jobs:
      - yarn-install
      - ts-lint:
          requires:
            - yarn-install
      - login-test:
          requires:
            - yarn-install