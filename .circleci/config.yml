# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  node: circleci/node@1.1.6
  codecov: codecov/codecov@1.0.2

jobs:

  ######
  # LOGIN
  ######
  # Install deps
  yarn-install:
    executor:
      name: node/default
      tag: lts

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    working_directory: ~/rykan-auth
    steps:
      # Download and cache dependencies
      - checkout
      - restore_cache:
          keys:
            - repo-yarn-packages
      - run:
          name: Install Nodejs Dependencies
          command: yarn install
      - save_cache:
          key: repo-yarn-packages-{{ checksum "login/package.json" }}
          paths:
            - ~/rykan-auth/node_modules
            - ~/rykan-auth/login/node_modules
            - ~/rykan-auth/defs/node_modules
  # Ts-lint
  ts-lint:
    executor:
      name: node/default
      tag: lts

    working_directory: ~/rykan-auth

    steps:
      - checkout
      - restore_cache:
          keys:
            - repo-yarn-packages-{{ checksum "login/package.json" }}
      - run:
          name: TSLint
          command: yarn run tslint --project ./login --config ./tslint.json

  # Login tests
  login-test:
    environment:
      DEBIAN_FRONTEND: noninteractive
      RYKAN_AMQP_ADDRESS: 'amqp://ci:ci@localhost:5672'
      RYKAN_POSTGRES_DATABASE_TO_USE: users # _TO_USE needed to prevent overlap with Rykan env for setting the db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ""
    docker:
      - image: circleci/node:lts
      - image: circleci/postgres:10-alpine-postgis-ram # Service
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
      - image: rabbitmq:3
        environment:
          RABBITMQ_DEFAULT_USER: ci
          RABBITMQ_DEFAULT_PASS: ci

    working_directory: ~/rykan-auth

    steps:
      - checkout
      - restore_cache:
          keys:
            - repo-yarn-packages-{{ checksum "login/package.json" }}
      - run:
          name: Install apt packages
          command: sudo apt-get install -y openssl postgresql-client
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Provision PostgreSQL
          command: |
            cd login
            psql -h "localhost" -U "$POSTGRES_USER" -d "postgres" -f sql/database.create.sql # Create DB
            psql -h "localhost" -U "$POSTGRES_USER" -d "$RYKAN_POSTGRES_DATABASE_TO_USE" -f ci/database.create.ci.sql # Change PWD
            psql -h "localhost" -U "$POSTGRES_USER" -d "$RYKAN_POSTGRES_DATABASE_TO_USE" -f sql/database.insert.dev.sql # Add test user
      - run:
          name: Wait for RabbitMQ
          command: dockerize -wait tcp://localhost:5672 -timeout 1m
      - run:
          name: Generate Keys
          working_directory: ~/rykan-auth/login
          command: |
            openssl genrsa -out ./private/jwt-rs256-private.pem 2048
            openssl rsa -in ./private/jwt-rs256-private.pem -pubout > ./private/jwt-rs256-public.pem
      - run:
          name: Test & codecov
          working_directory: ~/rykan-auth/login
          command: |
            export RYKAN_DB_ENV=ci
            cp ./ci/database.json ./private/database.json
            yarn run coverage
            mkdir -p ~/rykan_auth/coverage/mocha
            cp -v ./coverage/coverage-final.json ~/rykan_auth/coverage/mocha/coverage-final.json
            cp -v ./coverage/test-results.xml ~/rykan_auth/coverage/mocha/test-results.xml
      - codecov/upload:
          file: "~/rykan_auth/coverage/mocha/coverage-final.json"
      - store_test_results:
          path: ~/rykan_auth/coverage
  

  ######
  # JWT
  ######
  jwt:
    working_directory: ~/rykan-auth
    docker:
      - image: maven:3-jdk-12
    steps:
      - checkout
      - restore_cache:
          key: repo-authenication-jwt-{{ checksum "./jwt/pom.xml" }}
      - run:
          name: Get dependencies
          working_directory: ~/rykan-auth/jwt
          command: mvn dependency:go-offline # gets the project dependencies
      - run: 
          name: Run Tests
          working_directory: ~/rykan-auth/jwt
          command: mvn package # run the actual tests
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: repo-authenication-jwt-{{ checksum "./jwt/pom.xml" }}
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: jwt/target/surefire-reports
      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: jwt/target/jwt-0.0.1-SNAPSHOT.jar

workflows:
  version: 2
  nodejs:
    jobs:
      - yarn-install
      - ts-lint:
          requires:
            - yarn-install
      - login-test:
          requires:
            - yarn-install
  java:
    jobs:
      - jwt
# TRIGGER