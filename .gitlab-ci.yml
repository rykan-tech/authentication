# Gitlab config

include:
  - local: ci/stages.yml
  - local: defs/.gitlab-ci.yml

variables:
  RYKAN_DB_ENV: ci
  POSTGRES_DB: users
  POSTGRES_USER: rykan-testing
  POSTGRES_PASSWORD: ""
  DEBIAN_FRONTEND: noninteractive
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE/login:$CI_COMMIT_REF_SLUG

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - login/node_modules/
    - defs/node_modules/

# Job 0: Build (npm install)
yarn-install:
  stage: prepare
  image: node:lts
  script:
    - yarn install

# db.login.build:
#   stage: prepare
#   image: postgres
#   script:
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.real_james.sql
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.ci.sql
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.insert.sql


# Job 1: test
ts-lint:
  stage: test
  image: node:lts
  script:
    - yarn run tslint --project ./login --config ./tslint.json

# Mocha & Coverage
login.test:
  stage: test
  image: node:lts
  # Database
  services:
    - postgres:latest
# DB setup
  before_script:
    - apt-get update  
    - apt-get install -y postgresql openssl
    - cd login
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ci/database.create.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ci/database.create.ci.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ci/database.insert.sql
    - openssl genrsa -out ./private/jwt-rs256-private.pem 2048
    - openssl rsa -in ./private/jwt-rs256-private.pem -pubout > ./private/jwt-rs256-public.pem
  script:
    - cp ./ci/database.json ./private/database.json
    - yarn run coverage
    - yarn run codecov
  artifacts:
    name: Login Coverage NYC
    paths:
      - login/coverage/

# Deploy to GitLab registry
login.docker:
  stage: dockerise
  image: docker:latest
  services:
    - docker:dind
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd login
    - cp -av ../defs/. ./defs/
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG

# Creates the :latest tagged image
login.docker.release:
  stage: deploy
  image: docker:latest
  only:
   - master
  services:
    - docker:dind
  variables:
    DOCKER_RELEASE_IMAGE_TAG: $CI_REGISTRY_IMAGE/login:latest
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd login
    - docker pull $DOCKER_IMAGE_TAG
    - docker tag $DOCKER_IMAGE_TAG $DOCKER_RELEASE_IMAGE_TAG
    - docker push $DOCKER_RELEASE_IMAGE_TAG