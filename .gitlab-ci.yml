# Gitlab config
stages:
  - prepare
  - test # Test & lint
  - document # Generate documentation
  - deploy # Deploy documentation

# Database
services:
  - postgres:latest

variables:
  RYKAN_DB_ENV: ci
  POSTGRES_DB: users
  POSTGRES_USER: rykan-testing
  POSTGRES_PASSWORD: ""

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Job 0: Build (npm install)
yarn-install:
  stage: prepare
  image: node:lts
  script:
    - yarn install

# db.login.build:
#   stage: prepare
#   image: postgres
#   script:
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.real_james.sql
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.ci.sql
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.insert.sql


# Job 1: test
ts-lint:
  stage: test
  image: node:lts
  script:
    - yarn run tslint --project ./login --config ./tslint.json

login.mocha:
  stage: test
  image: node:lts
  before_script:
    - cp ./login/ci/database.json ./login/private/database.json
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.real_james.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.create.ci.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f login/ci/database.insert.sql
  script:
    - cd login && yarn test

# Deploy to GitLab registry
login.docker:
  stage: deploy
  image: docker:latest
  script:
    - cd login
    - docker build -t registry.gitlab.com/rykan/authentication/login .
    - docker push registry.gitlab.com/rykan/authentication/login
