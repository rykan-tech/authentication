#%RAML 1.0
# Microservices API, exposed by the API gatweay
title: Rykan Authentication API
version: v1
baseUri: https://api.rykan.tech/auth

uses:
  common: ../common/common.raml

types:
  LoginSchema: !include schemas/login.json
  JWTReturn: !include schemas/jwt-return.json
  Profile: !include schemas/profile-signup.json
  MessageReturn: !include ../common/schemas/message-return.raml

securitySchemes:
  JWT: !include securitySchemes/jwt.raml
  XSRF: !include securitySchemes/xsrf.raml

/login:
  description: |
    Authenticates a username and password combo.
    Returns a JWT refresh token
    if the username and password is valid.
    The schema for the JWT is found at schemas/jwt.json.
    Please note: to use the microservices, an access token
    JWT must be issued by the JWT server
  post:
    securedBy: XSRF
    body:
      application/json: LoginSchema
    responses:
      200:
        headers:
          Set-Cookie:
            type: string
            description: |
              Sets the cookie for the refresh token
              & refresh XSRF.
              Must use HttpOnly (but only on refresh token)
              & Secure attributes.
            pattern: |
              ^_AuthRefresh=(.*); Expires=(.*); Secure; HttpOnly;
              _XSRFTokenRefresh=(.*); Expires=(.*); Secure;$
        body:
          application/json:
            type: JWTReturn
            example:
              message: JWT issued
              isAuthenticated: true
      401:
        body:
          application/json:
            type: MessageReturn
            example:
              message: Invalid username or password
    is: [ common.missingField ]


/signup:
  description: |
    Creates a new user in the database (on the login server)
    And then sends out a message to the other microservices,
    that a new user has been made.
    Also tells profile server to make a new profile for the user,
    transferring profile data with it.
  post:
    securedBy: XSRF
    body:
      application/json: Profile
    responses:
      200:
        body:
          application/json:
            type: MessageReturn
            example:
              message: Profile created!
    is: [ common.missingField ]

# JWT server
/jwt/revoke:
  description: |
    Used to revoke a JWT refresh token.
    Requires you to be logged in to revoke a JWT.
    Permission jwt:revoke:others is required.
    If no JTI is present, revoke the JWT refresh token
    in the cookie supplied
    (log out)
  post:
    securedBy: JWT
    body:
      application/json:
        properties:
          jti:
            description: Unique ID for the JWT to revoke
            type: string
            required: false
    is: [ common.messageReturn, common.missingField ]

/jwt/issue:
  description: |
    Issues a new access token in the name of the user
    Who is in the supplied JWT refresh token
  get:
    securedBy: JWT
    responses:
      200:
        headers:
          Set-Cookie:
            type: string
            description: Must use HttpOnly & Secure attributes.
            pattern: ^_AuthAccess=(.*); Expires=(.*); Secure; HttpOnly;$
        body:
          application/json:
            properties:
              message: string
              xsrf: number
            example:
              message: JWT issued.
              xsrf: 31415926535897932384626433832795028841971

/jwt/revoke/all:
  description: |
    Used to revoke all JWT refresh tokens
    (logout of all devices) by chaning user's UUID
    Requires you to be logged in to revoke a JWT.
    Permission jwt:revoke (jwt:revoke:all) is required.
  delete:
    securedBy: JWT
    is: [ common.messageReturn ]
